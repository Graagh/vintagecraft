package at.tyron.vintagecraft.block;

import java.util.List;
import java.util.Random;

import at.tyron.vintagecraft.World.EnumRockType;
import at.tyron.vintagecraft.item.ItemRock;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.properties.PropertyEnum;
import net.minecraft.block.state.BlockState;
import net.minecraft.block.state.IBlockState;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.BlockPos;
import net.minecraft.world.World;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;


//- rock is solid rock - is below bedrock until world bottom - 1
//- hard to mine
//- graphics will be like smooth stone 


public class BlockRock extends VCBlock {

	public static final PropertyEnum STONETYPE = PropertyEnum.create("type", EnumRockType.class);
    

	protected BlockRock(Material materialIn) {
		super(materialIn);
		
        this.setDefaultState(this.blockState.getBaseState().withProperty(STONETYPE, EnumRockType.GNEISS));
        this.setCreativeTab(CreativeTabs.tabBlock);
	}

	
    public BlockRock() {
        this(Material.rock);
	}
    
    
    @Override
    public boolean onBlockActivated(World world, BlockPos pos, IBlockState state, EntityPlayer player, EnumFacing side, float hitX, float hitY, float hitZ) {
        TileEntity te = world.getTileEntity(pos);
        if(te instanceof TEOre) {
        	TEOre cte = (TEOre) te;
            Vec3 vec = revRotate(new Vec3(hitX - .5, hitY - .5, hitZ - .5), side).addVector(.5, .5, .5);
            IUnlistedProperty property = properties[side.ordinal()];
            Integer value = (Integer)cte.getState().getValue(property);
            if(value == null) value = 0;
            value ^= (1 << ( cubeSize * ((int)(vec.xCoord * (cubeSize - .0001))) + ((int)(vec.zCoord * (cubeSize - .0001))) ));
            cte.setState(cte.getState().withProperty(property, value));
            world.markBlockRangeForRenderUpdate(pos, pos);
        }
        return true;
    }

    
   
    @Override
    protected BlockState createBlockState() {
        return new BlockState(this, new IProperty[] {STONETYPE});
    }
    
    @Override
    public int getMetaFromState(IBlockState state) {
        return ((EnumRockType)state.getValue(STONETYPE)).getMetaData();
    }
    
    @Override
    public IBlockState getStateFromMeta(int meta) {
    	return this.blockState.getBaseState().withProperty(STONETYPE, EnumRockType.byMetadata(meta));
    }


    @SideOnly(Side.CLIENT)
    public void getSubBlocks(Item itemIn, CreativeTabs tab, List list) {
    	EnumRockType[] aenumtype = EnumRockType.values();
        int i = aenumtype.length;

        for (int j = 0; j < i; ++j) {
        	EnumRockType enumtype = aenumtype[j];
            list.add(new ItemStack(itemIn, 1, enumtype.getMetaData()));
        }
    }
    
    

    
}
