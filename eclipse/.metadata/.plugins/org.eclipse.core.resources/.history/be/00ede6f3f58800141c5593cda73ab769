package at.tyron.vintagecraft.block;

import java.util.List;

import net.minecraft.block.Block;
import net.minecraft.block.BlockContainer;
import net.minecraft.block.material.Material;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.properties.PropertyEnum;
import net.minecraft.block.state.BlockState;
import net.minecraft.block.state.IBlockState;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumWorldBlockLayer;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import net.minecraftforge.common.property.ExtendedBlockState;
import net.minecraftforge.common.property.IUnlistedProperty;
import net.minecraftforge.common.property.Properties;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.relauncher.SideOnly;
import at.tyron.vintagecraft.ModInfo;
import at.tyron.vintagecraft.TileEntity.TEOre;
import at.tyron.vintagecraft.World.EnumMaterialDeposit;
import at.tyron.vintagecraft.World.EnumOreType;
import at.tyron.vintagecraft.World.EnumRockType;

public class BlockOreVC extends BlockContainer {

	 
	protected BlockOreVC() {
		super(Material.iron);
		//setCreativeTab(CreativeTabs.tabBlock);
		setUnlocalizedName(ModInfo.ModID + ":ore");
		this.setDefaultState(this.blockState.getBaseState());
	}

    @Override
    public int getRenderType() { return 3; }

    @Override
    public boolean isOpaqueCube() { return true; }

    @Override
    public boolean isFullCube() { return false; }

    @Override
    public boolean isVisuallyOpaque() { return false; }

    @Override
    public TileEntity createNewTileEntity(World world, int meta) {
        return new TEOre();
    }

    @SideOnly(Side.CLIENT)
    public EnumWorldBlockLayer getBlockLayer() {
        return EnumWorldBlockLayer.CUTOUT_MIPPED;
    }

    
    
    @Override
    public IBlockState getExtendedState(IBlockState state, IBlockAccess world, BlockPos pos) {
        TileEntity te = world.getTileEntity(pos);
        if(te instanceof TEOre) {
        	//System.out.println("te is of instance TEOre");
        	TEOre cte = (TEOre) te;
            return cte.getState();
        } else {
        	System.out.println("te is NOT of instance TEOre");
        	System.out.println(te);
        	System.out.println(te.getClass().toString());
        }
        return state;
    }

    @Override
    protected BlockState createBlockState() {
        return new ExtendedBlockState(this, new IProperty[0], TEOre.properties);
    }
    
    
	
	/*public static final PropertyEnum ORETYPE = PropertyEnum.create("oretype", EnumOreType.class);
	
	public BlockOreVC() {
		super();
		
		this.setDefaultState(this.blockState.getBaseState()
			.withProperty(STONETYPE, EnumRockType.GNEISS)
			.withProperty(ORETYPE, EnumOreType.COAL)
		);
	}
	
	@Override
	public IBlockState getActualState(IBlockState state, IBlockAccess worldIn, BlockPos pos) {
		return super.getActualState(state, worldIn, pos);
	}
	
    @Override
    protected BlockState createBlockState() {
        return new BlockState(this, new IProperty[] {STONETYPE, ORETYPE});
    }*/
    
 

}
