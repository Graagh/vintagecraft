package at.tyron.vintagecraft.WorldGen.GenLayers.Continent;

import at.tyron.vintagecraft.World.BiomeVC;
import at.tyron.vintagecraft.WorldGen.WorldTypeVC;
import at.tyron.vintagecraft.WorldGen.GenLayers.GenLayerVC;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;

public class GenLayerBiome extends GenLayerVC {

	/** this sets all the biomes that are allowed to appear in the overworld */
	private BiomeVC[] allowedBiomes = new BiomeVC[] {
			BiomeVC.ocean,
			BiomeVC.HighHills,
			BiomeVC.plains,
			BiomeVC.HighPlains,
			BiomeVC.swampland,
			BiomeVC.rollingHills,
			BiomeVC.Mountains,
	};

	public GenLayerBiome(long par1, GenLayerVC par3GenLayer)
	{
		super(par1);
		this.parent = par3GenLayer;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be interpreted as temperatures, rainfall
	 * amounts, or biomeList[] indices based on the particular GenLayer subclass.
	 */
	@Override
	public int[] getInts(int par1, int par2, int par3, int par4)
	{
		int[] var5 = this.parent.getInts(par1, par2, par3, par4);
		validateBiomeIntArray(var5, par3, par4);
		int[] var6 = IntCache.getIntCache(par3 * par4);

		for (int var7 = 0; var7 < par4; ++var7)
		{
			for (int var8 = 0; var8 < par3; ++var8)
			{
				this.initChunkSeed(var8 + par1, var7 + par2);
				int id = var5[var8 + var7 * par3];
				//if (VC_Core.isOceanicBiome(id))
				if (BiomeVC.isOceanic(id))
					var6[var8 + var7 * par3] = id;
				else
					var6[var8 + var7 * par3] = this.allowedBiomes[this.nextInt(this.allowedBiomes.length)].biomeID;

				validateInt(var6, var8 + var7 * par3);
			}
		}
		return var6;
	}

}
